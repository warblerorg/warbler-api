# View with Swagger Editor - http://editor.swagger.io/
openapi: 3.0.0
info:
    title: Warbler
    description: >
        Yet another comment system.
    version: '1.0.0'
    license:
        name: 'MIT'
        url: 'https://opensource.org/licenses/MIT'
servers:
    - url: https://{warblerServer}/v1
      description: Warbler self-hosted server
      variables:
          warblerServer:
              default: your-warbler-server.com
              description: Domain name of your warbler server
    - url: https://warbler.io/v1
      description: Warbler Pro server
tags:
    - name: 'comment'
      description: 'Operations about comments'
    - name: 'user'
      description: 'Operations about user'
paths:
    /thread/{thread_id}/:
        summary: 'Represents a thread'
        get:
            tags: [comment]
            summary: 'Get metadata for a thread'
            operationId: 'getThread'
            parameters:
                - $ref: '#/components/parameters/threadIdParam'
            responses:
                200:
                    description: 'Response with metadata'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    thread_id:
                                        type: string
                404:
                    description: 'Thread ID does not exist'
            security: []
    /thread/{thread_id}/comments/:
        summary: 'Represents comments in a thread'
        get:
            tags: [comment]
            summary: 'Find comments for a thread'
            operationId: 'getComments'
            parameters:
                - $ref: '#/components/parameters/threadIdParam'
                - name: 'sort'
                  in: query
                  description: 'Direction to sort comments'
                  schema:
                      type: string
                      enum: [asc, desc]
                - name: 'max_depth'
                  in: query
                  description: 'Max depth of child comments'
                  schema:
                      type: integer
            responses:
                200:
                    description: 'Response with comments'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    comments:
                                        $ref: '#/components/schemas/CommentsArray'
                                    total:
                                        type: integer
                404:
                    description: 'Thread ID does not exist'
            security: []
        post:
            tags: [comment]
            summary: 'Add a new comment to the thread'
            operationId: 'addComment'
            requestBody:
                $ref: '#/components/requestBodies/NewCommentBody'
            parameters:
                - $ref: '#/components/parameters/threadIdParam'
            responses:
                200:
                    description: 'Successfully added comment'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
                404:
                    description: 'Thread ID does not exist'
            security:
                - bearerAuth: []
    /thread/{thread_id}/comments/{comment_id}:
        get:
            tags: [comment]
            summary: 'Get a single comment sub-tree in the thread'
            operationId: 'getComment'
            parameters:
                - $ref: '#/components/parameters/threadIdParam'
                - $ref: '#/components/parameters/commentIdParam'
                - name: 'sort'
                  in: query
                  description: 'Direction to sort comments'
                  schema:
                      type: string
                      enum: [asc, desc]
                - name: 'max_depth'
                  in: query
                  description:
                      'Max depth of child comments relative to the depth of this
                      comment'
                  schema:
                      type: integer
            responses:
                200:
                    description: 'Comment sub-tree'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
                404:
                    description: 'Thread ID or comment ID does not exist'
        put:
            tags: [comment]
            summary: 'Update a comment in the thread'
            operationId: 'updateComment'
            requestBody:
                $ref: '#/components/requestBodies/NewCommentBody'
            parameters:
                - $ref: '#/components/parameters/threadIdParam'
                - $ref: '#/components/parameters/commentIdParam'
            responses:
                200:
                    description: 'Successfully updated comment'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
                401:
                    description: 'User is not the comment author nor admin'
                404:
                    description: 'Thread ID or comment ID does not exist'
            security:
                - bearerAuth: []
        delete:
            tags: [comment]
            summary: 'Delete a comment in the thread'
            operationId: 'deleteComment'
            parameters:
                - $ref: '#/components/parameters/threadIdParam'
                - $ref: '#/components/parameters/commentIdParam'
            responses:
                200:
                    description: 'Successfully deleted comment'
                401:
                    description: 'User is not the comment author nor admin'
                404:
                    description: 'Thread ID or comment ID does not exist'
            security:
                - bearerAuth: []
    /markdown/:
        post:
            tags: [comment]
            summary: 'Render markdown as HTML'
            operationId: 'preview'
            requestBody:
                required: true
                content:
                    text/plain:
                        schema:
                            type: string
                            format: 'markdown'
            responses:
                200:
                    description: 'Response with HTML'
            security: []
    /user:
        post:
            tags:
                - 'user'
            summary: 'Create user'
            description: 'This can only be done by the logged in user.'
            operationId: 'createUser'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                200:
                    description: 'successful operation'
            security:
                - bearerAuth: []
        put:
            tags: ['user']
            summary: 'Update user'
            description: 'This can only be done by the logged in user.'
            operationId: 'updateUser'
            requestBody:
                required: true
                description: 'Updated user object'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                200:
                    description: 'Updated user'
                400:
                    description: 'Invalid user supplied'
                404:
                    description: 'User not found'
            security:
                - bearerAuth: []
        delete:
            tags: ['user']
            summary: 'Delete user'
            description: 'This can only be done by the logged in user.'
            operationId: 'deleteUser'
            parameters: []
            responses:
                200:
                    description: 'User deleted'
            security:
                - bearerAuth: []
    /user/login:
        get:
            tags: ['user']
            summary: 'Logs user into the system'
            operationId: 'loginUser'
            parameters:
                - name: 'username'
                  in: 'query'
                  description: 'The user name for login (Email or ID)'
                  required: true
                  schema:
                      type: string
                - name: 'password'
                  in: 'query'
                  description: 'The password for login'
                  required: true
                  schema:
                      type: string
                      format: password
            responses:
                200:
                    description: 'successful operation, returns JSON Web Token'
                    content:
                        application/json:
                            schema:
                                type: string
                                format: jwt
                400:
                    description: 'Invalid username/password supplied'
            security: []
    /user/logout:
        get:
            tags: ['user']
            summary: 'Logs out current logged in user session'
            description: ''
            operationId: 'logoutUser'
            parameters: []
            responses:
                200:
                    description: 'successful operation'
            security:
                - bearerAuth: []
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    requestBodies:
        NewCommentBody:
            description: >
                A JSON object or form data describing a new comment, optionally
                with a parent comment ID.
            required: true
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/NewComment'
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/NewComment'
                text/plain:
                    schema:
                        type: string
                        format: markdown
    parameters:
        threadIdParam:
            name: 'thread_id'
            in: 'path'
            description: 'ID of thread containing comments'
            required: true
            schema:
                type: string
        commentIdParam:
            name: 'comment_id'
            in: 'path'
            description: 'ID of comment'
            required: true
            schema:
                type: integer
                format: 'int32'
    schemas:
        Comment:
            type: object
            properties:
                thread_id:
                    type: string
                comment_id:
                    type: integer
                    format: 'int32'
                parent_id:
                    nullable: true
                    type: integer
                    format: 'int32'
                author:
                    $ref: '#/components/schemas/User'
                author_association:
                    type: string
                    enum: [none, author]
                content:
                    type: string
                    format: html
                created_at:
                    type: string
                    format: 'date-time'
                updated_at:
                    type: string
                    format: 'date-time'
                reactions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Reaction'
                children:
                    $ref: '#/components/schemas/CommentsArray'
        MoreComment:
            type: object
            properties:
                comment_id:
                    type: integer
                    format: int32
                count:
                    type: integer
        CommentsArray:
            type: array
            items:
                oneOf:
                    - $ref: '#/components/schemas/Comment'
                    - $ref: '#/components/schemas/MoreComment'
        NewComment:
            type: object
            properties:
                parent_id:
                    type: integer
                    format: 'int32'
                content:
                    type: string
                    format: 'markdown'
            required:
                - content
        Reaction:
            type: object
            properties:
                emoji:
                    type: string
                count:
                    type: integer
                viewer_has_reacted:
                    type: boolean
            required:
                - emoji
                - count
                - viewer_has_reacted
            example:
                emoji: 🙂
                count: 3
                viewer_has_reacted: false
        User:
            type: object
            properties:
                username:
                    type: string
                name:
                    type: string
                website:
                    type: string
                avatar_url:
                    type: string
            example:
                username: 'drwho'
                name: 'John Smith'
                website: 'https://example.com'
                avatar_url: ''
